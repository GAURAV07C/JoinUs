generator client {
  provider = "prisma-client-js"
  output   = "./../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  SELLER
  ADMIN
  DELIVERY_PARTNER
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum DeliveryStatus {
  PENDING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  REFUNDED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerProfile  SellerProfile?
  products       Product[]
  orders         Order[]
  deliveryOrders DeliveryOrder[]
  Address        Address[]
  Cart           Cart[]
  Wishlist       Wishlist[]
  Notification   Notification[]
  Review         Review[]
  ReturnRequest  ReturnRequest[]
}

model SellerProfile {
  id           String       @id @default(uuid())
  userId       String       @unique
  businessName String
  panNumber    String       @unique
  gstNumber    String?      @unique
  bankAccount  String
  status       SellerStatus @default(PENDING)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  products     Product[]
  sellerOrders SellerOrder[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  OrderItem      OrderItem[]
  ProductVariant ProductVariant[]
}

model Product {
  id          String @id @default(uuid())
  name        String
  description String

  sellerId       String
  seller         SellerProfile    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  status         ProductStatus    @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  OrderItem      OrderItem[]
  Cart           Cart[]
  Wishlist       Wishlist[]
  Category       Category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String?
  ProductVariant ProductVariant[]
  Review         Review[]
  ProductImage   ProductImage[]
}

model ProductVariant {
  id            String        @id @default(uuid())
  productId     String
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  sellerId      String
  seller        SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  price         Float
  stock         Int?
  isMadeToOrder Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
}

model Review {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int     @default(5) // 1 se 5 tak rating
  comment   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // Ek user ek product par ek hi review likh sakta hai
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id            String         @id @default(uuid())
  buyerId       String
  buyer         User           @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  status        OrderStatus    @default(PENDING)
  totalAmount   Float
  payment       Payment?
  orderItems    OrderItem[]
  sellerOrders  SellerOrder[]
  deliveryOrder DeliveryOrder?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ReturnRequest ReturnRequest[]
}

model OrderItem {
  id        String        @id @default(uuid())
  orderId   String
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  sellerId  String
  seller    SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellerOrder {
  id       String        @id @default(uuid())
  sellerId String
  seller   SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orderId  String
  order    Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status   OrderStatus   @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReturnRequest {
  id      String       @id @default(uuid())
  orderId String
  order   Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  buyerId String
  buyer   User         @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  reason  String
  status  ReturnStatus @default(REQUESTED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id      String        @id @default(uuid())
  orderId String        @unique
  order   Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount  Float
  status  PaymentStatus @default(PENDING)
  method  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryOrder {
  id                String @id @default(uuid())
  orderId           String @unique
  order             Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  deliveryPartnerId String
  deliveryPartner   User   @relation(fields: [deliveryPartnerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id      String @id @default(uuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  address String
  city    String
  state   String
  country String
  zipCode String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, productId])
}

model Wishlist {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // prevents duplicates
}

model Notification {
  id      String  @id @default(uuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message String
  read    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
